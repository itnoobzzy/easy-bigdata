// Code generated by MockGen. DO NOT EDIT.
// Source: easyCasbin/internal/biz (interfaces: DomainRoleRepo)

// Package biz is a generated GoMock package.
package biz

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDomainRoleRepo is a mock of DomainRoleRepo interface.
type MockDomainRoleRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDomainRoleRepoMockRecorder
}

// MockDomainRoleRepoMockRecorder is the mock recorder for MockDomainRoleRepo.
type MockDomainRoleRepoMockRecorder struct {
	mock *MockDomainRoleRepo
}

// NewMockDomainRoleRepo creates a new mock instance.
func NewMockDomainRoleRepo(ctrl *gomock.Controller) *MockDomainRoleRepo {
	mock := &MockDomainRoleRepo{ctrl: ctrl}
	mock.recorder = &MockDomainRoleRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainRoleRepo) EXPECT() *MockDomainRoleRepoMockRecorder {
	return m.recorder
}

// AddDomainRole mocks base method.
func (m *MockDomainRoleRepo) AddDomainRole(arg0 context.Context, arg1, arg2 string) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDomainRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDomainRole indicates an expected call of AddDomainRole.
func (mr *MockDomainRoleRepoMockRecorder) AddDomainRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDomainRole", reflect.TypeOf((*MockDomainRoleRepo)(nil).AddDomainRole), arg0, arg1, arg2)
}

// CheckDomainRole mocks base method.
func (m *MockDomainRoleRepo) CheckDomainRole(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDomainRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDomainRole indicates an expected call of CheckDomainRole.
func (mr *MockDomainRoleRepoMockRecorder) CheckDomainRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDomainRole", reflect.TypeOf((*MockDomainRoleRepo)(nil).CheckDomainRole), arg0, arg1, arg2)
}

// CheckDomains mocks base method.
func (m *MockDomainRoleRepo) CheckDomains(arg0 context.Context, arg1 []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDomains", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDomains indicates an expected call of CheckDomains.
func (mr *MockDomainRoleRepoMockRecorder) CheckDomains(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDomains", reflect.TypeOf((*MockDomainRoleRepo)(nil).CheckDomains), arg0, arg1)
}

// DeleteDomain mocks base method.
func (m *MockDomainRoleRepo) DeleteDomain(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomain", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomain indicates an expected call of DeleteDomain.
func (mr *MockDomainRoleRepoMockRecorder) DeleteDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomain", reflect.TypeOf((*MockDomainRoleRepo)(nil).DeleteDomain), arg0, arg1)
}

// DeleteDomainRole mocks base method.
func (m *MockDomainRoleRepo) DeleteDomainRole(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainRole indicates an expected call of DeleteDomainRole.
func (mr *MockDomainRoleRepoMockRecorder) DeleteDomainRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainRole", reflect.TypeOf((*MockDomainRoleRepo)(nil).DeleteDomainRole), arg0, arg1, arg2)
}

// GetAllDomains mocks base method.
func (m *MockDomainRoleRepo) GetAllDomains(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDomains", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDomains indicates an expected call of GetAllDomains.
func (mr *MockDomainRoleRepoMockRecorder) GetAllDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDomains", reflect.TypeOf((*MockDomainRoleRepo)(nil).GetAllDomains), arg0)
}

// GetDomainRoles mocks base method.
func (m *MockDomainRoleRepo) GetDomainRoles(arg0 context.Context, arg1 string) ([]*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainRoles", arg0, arg1)
	ret0, _ := ret[0].([]*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainRoles indicates an expected call of GetDomainRoles.
func (mr *MockDomainRoleRepoMockRecorder) GetDomainRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainRoles", reflect.TypeOf((*MockDomainRoleRepo)(nil).GetDomainRoles), arg0, arg1)
}

// UpdateDomainRole mocks base method.
func (m *MockDomainRoleRepo) UpdateDomainRole(arg0 context.Context, arg1, arg2, arg3 string) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainRole indicates an expected call of UpdateDomainRole.
func (mr *MockDomainRoleRepoMockRecorder) UpdateDomainRole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainRole", reflect.TypeOf((*MockDomainRoleRepo)(nil).UpdateDomainRole), arg0, arg1, arg2, arg3)
}
