// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.3
// source: role/v1/role.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DomainRole_AddDomainRole_FullMethodName            = "/api.role.v1.DomainRole/AddDomainRole"
	DomainRole_UpdateRoleInfo_FullMethodName           = "/api.role.v1.DomainRole/UpdateRoleInfo"
	DomainRole_DeleteRole_FullMethodName               = "/api.role.v1.DomainRole/DeleteRole"
	DomainRole_GetDomainRoles_FullMethodName           = "/api.role.v1.DomainRole/GetDomainRoles"
	DomainRole_GetDomainSubsForRole_FullMethodName     = "/api.role.v1.DomainRole/GetDomainSubsForRole"
	DomainRole_AddRoleForSubInDomain_FullMethodName    = "/api.role.v1.DomainRole/AddRoleForSubInDomain"
	DomainRole_DeleteRoleForSubInDomain_FullMethodName = "/api.role.v1.DomainRole/DeleteRoleForSubInDomain"
)

// DomainRoleClient is the client API for DomainRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainRoleClient interface {
	// 添加域角色
	AddDomainRole(ctx context.Context, in *AddDomainRoleReq, opts ...grpc.CallOption) (*AddDomainRoleRpl, error)
	// 更新域角色信息
	UpdateRoleInfo(ctx context.Context, in *UpdateDomainRoleReq, opts ...grpc.CallOption) (*UpdateDomainRoleRpl, error)
	// DeleteRole 删除对应域的角色
	DeleteRole(ctx context.Context, in *DeleteDomainRoleReq, opts ...grpc.CallOption) (*DeleteDomainRoleRpl, error)
	// GetDomainRoles 获取指定域下所有角色
	GetDomainRoles(ctx context.Context, in *GetAllRolesReq, opts ...grpc.CallOption) (*GetAllRolesRpl, error)
	// GetDomainSubsForRole 获取指定域角色下所有用户
	GetDomainSubsForRole(ctx context.Context, in *GetDomainSubsForRoleReq, opts ...grpc.CallOption) (*GetDomainSubsForRoleRpl, error)
	// AddRoleForSubInDomain 为用户添加域角色或者为角色继承另一个角色权限
	AddRoleForSubInDomain(ctx context.Context, in *AddRoleForSubInDomainReq, opts ...grpc.CallOption) (*AddRoleForSubInDomainRpl, error)
	// DeleteRoleForSubInDomain 删除角色下subject（鉴权主体）
	DeleteRoleForSubInDomain(ctx context.Context, in *DeleteRoleForSubInDomainReq, opts ...grpc.CallOption) (*DeleteRoleForSubInDomainRpl, error)
}

type domainRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainRoleClient(cc grpc.ClientConnInterface) DomainRoleClient {
	return &domainRoleClient{cc}
}

func (c *domainRoleClient) AddDomainRole(ctx context.Context, in *AddDomainRoleReq, opts ...grpc.CallOption) (*AddDomainRoleRpl, error) {
	out := new(AddDomainRoleRpl)
	err := c.cc.Invoke(ctx, DomainRole_AddDomainRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainRoleClient) UpdateRoleInfo(ctx context.Context, in *UpdateDomainRoleReq, opts ...grpc.CallOption) (*UpdateDomainRoleRpl, error) {
	out := new(UpdateDomainRoleRpl)
	err := c.cc.Invoke(ctx, DomainRole_UpdateRoleInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainRoleClient) DeleteRole(ctx context.Context, in *DeleteDomainRoleReq, opts ...grpc.CallOption) (*DeleteDomainRoleRpl, error) {
	out := new(DeleteDomainRoleRpl)
	err := c.cc.Invoke(ctx, DomainRole_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainRoleClient) GetDomainRoles(ctx context.Context, in *GetAllRolesReq, opts ...grpc.CallOption) (*GetAllRolesRpl, error) {
	out := new(GetAllRolesRpl)
	err := c.cc.Invoke(ctx, DomainRole_GetDomainRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainRoleClient) GetDomainSubsForRole(ctx context.Context, in *GetDomainSubsForRoleReq, opts ...grpc.CallOption) (*GetDomainSubsForRoleRpl, error) {
	out := new(GetDomainSubsForRoleRpl)
	err := c.cc.Invoke(ctx, DomainRole_GetDomainSubsForRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainRoleClient) AddRoleForSubInDomain(ctx context.Context, in *AddRoleForSubInDomainReq, opts ...grpc.CallOption) (*AddRoleForSubInDomainRpl, error) {
	out := new(AddRoleForSubInDomainRpl)
	err := c.cc.Invoke(ctx, DomainRole_AddRoleForSubInDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainRoleClient) DeleteRoleForSubInDomain(ctx context.Context, in *DeleteRoleForSubInDomainReq, opts ...grpc.CallOption) (*DeleteRoleForSubInDomainRpl, error) {
	out := new(DeleteRoleForSubInDomainRpl)
	err := c.cc.Invoke(ctx, DomainRole_DeleteRoleForSubInDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainRoleServer is the server API for DomainRole service.
// All implementations must embed UnimplementedDomainRoleServer
// for forward compatibility
type DomainRoleServer interface {
	// 添加域角色
	AddDomainRole(context.Context, *AddDomainRoleReq) (*AddDomainRoleRpl, error)
	// 更新域角色信息
	UpdateRoleInfo(context.Context, *UpdateDomainRoleReq) (*UpdateDomainRoleRpl, error)
	// DeleteRole 删除对应域的角色
	DeleteRole(context.Context, *DeleteDomainRoleReq) (*DeleteDomainRoleRpl, error)
	// GetDomainRoles 获取指定域下所有角色
	GetDomainRoles(context.Context, *GetAllRolesReq) (*GetAllRolesRpl, error)
	// GetDomainSubsForRole 获取指定域角色下所有用户
	GetDomainSubsForRole(context.Context, *GetDomainSubsForRoleReq) (*GetDomainSubsForRoleRpl, error)
	// AddRoleForSubInDomain 为用户添加域角色或者为角色继承另一个角色权限
	AddRoleForSubInDomain(context.Context, *AddRoleForSubInDomainReq) (*AddRoleForSubInDomainRpl, error)
	// DeleteRoleForSubInDomain 删除角色下subject（鉴权主体）
	DeleteRoleForSubInDomain(context.Context, *DeleteRoleForSubInDomainReq) (*DeleteRoleForSubInDomainRpl, error)
	mustEmbedUnimplementedDomainRoleServer()
}

// UnimplementedDomainRoleServer must be embedded to have forward compatible implementations.
type UnimplementedDomainRoleServer struct {
}

func (UnimplementedDomainRoleServer) AddDomainRole(context.Context, *AddDomainRoleReq) (*AddDomainRoleRpl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDomainRole not implemented")
}
func (UnimplementedDomainRoleServer) UpdateRoleInfo(context.Context, *UpdateDomainRoleReq) (*UpdateDomainRoleRpl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleInfo not implemented")
}
func (UnimplementedDomainRoleServer) DeleteRole(context.Context, *DeleteDomainRoleReq) (*DeleteDomainRoleRpl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedDomainRoleServer) GetDomainRoles(context.Context, *GetAllRolesReq) (*GetAllRolesRpl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainRoles not implemented")
}
func (UnimplementedDomainRoleServer) GetDomainSubsForRole(context.Context, *GetDomainSubsForRoleReq) (*GetDomainSubsForRoleRpl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainSubsForRole not implemented")
}
func (UnimplementedDomainRoleServer) AddRoleForSubInDomain(context.Context, *AddRoleForSubInDomainReq) (*AddRoleForSubInDomainRpl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleForSubInDomain not implemented")
}
func (UnimplementedDomainRoleServer) DeleteRoleForSubInDomain(context.Context, *DeleteRoleForSubInDomainReq) (*DeleteRoleForSubInDomainRpl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleForSubInDomain not implemented")
}
func (UnimplementedDomainRoleServer) mustEmbedUnimplementedDomainRoleServer() {}

// UnsafeDomainRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainRoleServer will
// result in compilation errors.
type UnsafeDomainRoleServer interface {
	mustEmbedUnimplementedDomainRoleServer()
}

func RegisterDomainRoleServer(s grpc.ServiceRegistrar, srv DomainRoleServer) {
	s.RegisterService(&DomainRole_ServiceDesc, srv)
}

func _DomainRole_AddDomainRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDomainRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainRoleServer).AddDomainRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainRole_AddDomainRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainRoleServer).AddDomainRole(ctx, req.(*AddDomainRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainRole_UpdateRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainRoleServer).UpdateRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainRole_UpdateRoleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainRoleServer).UpdateRoleInfo(ctx, req.(*UpdateDomainRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainRole_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainRoleServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainRole_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainRoleServer).DeleteRole(ctx, req.(*DeleteDomainRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainRole_GetDomainRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainRoleServer).GetDomainRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainRole_GetDomainRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainRoleServer).GetDomainRoles(ctx, req.(*GetAllRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainRole_GetDomainSubsForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainSubsForRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainRoleServer).GetDomainSubsForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainRole_GetDomainSubsForRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainRoleServer).GetDomainSubsForRole(ctx, req.(*GetDomainSubsForRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainRole_AddRoleForSubInDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleForSubInDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainRoleServer).AddRoleForSubInDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainRole_AddRoleForSubInDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainRoleServer).AddRoleForSubInDomain(ctx, req.(*AddRoleForSubInDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainRole_DeleteRoleForSubInDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleForSubInDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainRoleServer).DeleteRoleForSubInDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainRole_DeleteRoleForSubInDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainRoleServer).DeleteRoleForSubInDomain(ctx, req.(*DeleteRoleForSubInDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainRole_ServiceDesc is the grpc.ServiceDesc for DomainRole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainRole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.role.v1.DomainRole",
	HandlerType: (*DomainRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDomainRole",
			Handler:    _DomainRole_AddDomainRole_Handler,
		},
		{
			MethodName: "UpdateRoleInfo",
			Handler:    _DomainRole_UpdateRoleInfo_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _DomainRole_DeleteRole_Handler,
		},
		{
			MethodName: "GetDomainRoles",
			Handler:    _DomainRole_GetDomainRoles_Handler,
		},
		{
			MethodName: "GetDomainSubsForRole",
			Handler:    _DomainRole_GetDomainSubsForRole_Handler,
		},
		{
			MethodName: "AddRoleForSubInDomain",
			Handler:    _DomainRole_AddRoleForSubInDomain_Handler,
		},
		{
			MethodName: "DeleteRoleForSubInDomain",
			Handler:    _DomainRole_DeleteRoleForSubInDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role/v1/role.proto",
}
