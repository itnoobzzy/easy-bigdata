// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: role/v1/role.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddDomainRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDomainRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDomainRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDomainRoleReqMultiError, or nil if none found.
func (m *AddDomainRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDomainRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_AddDomainRoleReq_DomainName_Pattern.MatchString(m.GetDomainName()) {
		err := AddDomainRoleReqValidationError{
			field:  "DomainName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_]{1,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddDomainRoleReq_RoleName_Pattern.MatchString(m.GetRoleName()) {
		err := AddDomainRoleReqValidationError{
			field:  "RoleName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_]{1,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddDomainRoleReqMultiError(errors)
	}

	return nil
}

// AddDomainRoleReqMultiError is an error wrapping multiple validation errors
// returned by AddDomainRoleReq.ValidateAll() if the designated constraints
// aren't met.
type AddDomainRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDomainRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDomainRoleReqMultiError) AllErrors() []error { return m }

// AddDomainRoleReqValidationError is the validation error returned by
// AddDomainRoleReq.Validate if the designated constraints aren't met.
type AddDomainRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDomainRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDomainRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDomainRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDomainRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDomainRoleReqValidationError) ErrorName() string { return "AddDomainRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e AddDomainRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDomainRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDomainRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDomainRoleReqValidationError{}

var _AddDomainRoleReq_DomainName_Pattern = regexp.MustCompile("^[0-9a-zA-Z_]{1,}$")

var _AddDomainRoleReq_RoleName_Pattern = regexp.MustCompile("^[0-9a-zA-Z_]{1,}$")

// Validate checks the field values on AddDomainRoleRpl with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDomainRoleRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDomainRoleRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDomainRoleRplMultiError, or nil if none found.
func (m *AddDomainRoleRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDomainRoleRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDomainRoleRplValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDomainRoleRplValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDomainRoleRplValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDomainRoleRplMultiError(errors)
	}

	return nil
}

// AddDomainRoleRplMultiError is an error wrapping multiple validation errors
// returned by AddDomainRoleRpl.ValidateAll() if the designated constraints
// aren't met.
type AddDomainRoleRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDomainRoleRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDomainRoleRplMultiError) AllErrors() []error { return m }

// AddDomainRoleRplValidationError is the validation error returned by
// AddDomainRoleRpl.Validate if the designated constraints aren't met.
type AddDomainRoleRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDomainRoleRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDomainRoleRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDomainRoleRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDomainRoleRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDomainRoleRplValidationError) ErrorName() string { return "AddDomainRoleRplValidationError" }

// Error satisfies the builtin error interface
func (e AddDomainRoleRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDomainRoleRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDomainRoleRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDomainRoleRplValidationError{}

// Validate checks the field values on UpdateDomainRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainRoleReqMultiError, or nil if none found.
func (m *UpdateDomainRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateDomainRoleReq_DomainName_Pattern.MatchString(m.GetDomainName()) {
		err := UpdateDomainRoleReqValidationError{
			field:  "DomainName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_]{1,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateDomainRoleReq_RoleName_Pattern.MatchString(m.GetRoleName()) {
		err := UpdateDomainRoleReqValidationError{
			field:  "RoleName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_]{1,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateDomainRoleReq_NewRoleName_Pattern.MatchString(m.GetNewRoleName()) {
		err := UpdateDomainRoleReqValidationError{
			field:  "NewRoleName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_]{1,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDomainRoleReqMultiError(errors)
	}

	return nil
}

// UpdateDomainRoleReqMultiError is an error wrapping multiple validation
// errors returned by UpdateDomainRoleReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateDomainRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainRoleReqMultiError) AllErrors() []error { return m }

// UpdateDomainRoleReqValidationError is the validation error returned by
// UpdateDomainRoleReq.Validate if the designated constraints aren't met.
type UpdateDomainRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainRoleReqValidationError) ErrorName() string {
	return "UpdateDomainRoleReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainRoleReqValidationError{}

var _UpdateDomainRoleReq_DomainName_Pattern = regexp.MustCompile("^[0-9a-zA-Z_]{1,}$")

var _UpdateDomainRoleReq_RoleName_Pattern = regexp.MustCompile("^[0-9a-zA-Z_]{1,}$")

var _UpdateDomainRoleReq_NewRoleName_Pattern = regexp.MustCompile("^[0-9a-zA-Z_]{1,}$")

// Validate checks the field values on UpdateDomainRoleRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainRoleRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainRoleRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainRoleRplMultiError, or nil if none found.
func (m *UpdateDomainRoleRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainRoleRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDomainRoleRplValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDomainRoleRplValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDomainRoleRplValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDomainRoleRplMultiError(errors)
	}

	return nil
}

// UpdateDomainRoleRplMultiError is an error wrapping multiple validation
// errors returned by UpdateDomainRoleRpl.ValidateAll() if the designated
// constraints aren't met.
type UpdateDomainRoleRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainRoleRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainRoleRplMultiError) AllErrors() []error { return m }

// UpdateDomainRoleRplValidationError is the validation error returned by
// UpdateDomainRoleRpl.Validate if the designated constraints aren't met.
type UpdateDomainRoleRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainRoleRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainRoleRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainRoleRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainRoleRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainRoleRplValidationError) ErrorName() string {
	return "UpdateDomainRoleRplValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainRoleRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainRoleRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainRoleRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainRoleRplValidationError{}

// Validate checks the field values on DeleteDomainRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDomainRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDomainRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDomainRoleReqMultiError, or nil if none found.
func (m *DeleteDomainRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDomainRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeleteDomainRoleReq_DomainName_Pattern.MatchString(m.GetDomainName()) {
		err := DeleteDomainRoleReqValidationError{
			field:  "DomainName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_]{1,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteDomainRoleReq_RoleName_Pattern.MatchString(m.GetRoleName()) {
		err := DeleteDomainRoleReqValidationError{
			field:  "RoleName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_]{1,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDomainRoleReqMultiError(errors)
	}

	return nil
}

// DeleteDomainRoleReqMultiError is an error wrapping multiple validation
// errors returned by DeleteDomainRoleReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteDomainRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDomainRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDomainRoleReqMultiError) AllErrors() []error { return m }

// DeleteDomainRoleReqValidationError is the validation error returned by
// DeleteDomainRoleReq.Validate if the designated constraints aren't met.
type DeleteDomainRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDomainRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDomainRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDomainRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDomainRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDomainRoleReqValidationError) ErrorName() string {
	return "DeleteDomainRoleReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDomainRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDomainRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDomainRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDomainRoleReqValidationError{}

var _DeleteDomainRoleReq_DomainName_Pattern = regexp.MustCompile("^[0-9a-zA-Z_]{1,}$")

var _DeleteDomainRoleReq_RoleName_Pattern = regexp.MustCompile("^[0-9a-zA-Z_]{1,}$")

// Validate checks the field values on DeleteDomainRoleRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDomainRoleRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDomainRoleRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDomainRoleRplMultiError, or nil if none found.
func (m *DeleteDomainRoleRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDomainRoleRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteDomainRoleRplValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteDomainRoleRplValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteDomainRoleRplValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteDomainRoleRplMultiError(errors)
	}

	return nil
}

// DeleteDomainRoleRplMultiError is an error wrapping multiple validation
// errors returned by DeleteDomainRoleRpl.ValidateAll() if the designated
// constraints aren't met.
type DeleteDomainRoleRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDomainRoleRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDomainRoleRplMultiError) AllErrors() []error { return m }

// DeleteDomainRoleRplValidationError is the validation error returned by
// DeleteDomainRoleRpl.Validate if the designated constraints aren't met.
type DeleteDomainRoleRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDomainRoleRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDomainRoleRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDomainRoleRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDomainRoleRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDomainRoleRplValidationError) ErrorName() string {
	return "DeleteDomainRoleRplValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDomainRoleRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDomainRoleRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDomainRoleRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDomainRoleRplValidationError{}

// Validate checks the field values on GetAllRolesReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAllRolesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRolesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAllRolesReqMultiError,
// or nil if none found.
func (m *GetAllRolesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRolesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetAllRolesReq_DomainName_Pattern.MatchString(m.GetDomainName()) {
		err := GetAllRolesReqValidationError{
			field:  "DomainName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_]{1,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAllRolesReqMultiError(errors)
	}

	return nil
}

// GetAllRolesReqMultiError is an error wrapping multiple validation errors
// returned by GetAllRolesReq.ValidateAll() if the designated constraints
// aren't met.
type GetAllRolesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRolesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRolesReqMultiError) AllErrors() []error { return m }

// GetAllRolesReqValidationError is the validation error returned by
// GetAllRolesReq.Validate if the designated constraints aren't met.
type GetAllRolesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRolesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRolesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRolesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRolesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRolesReqValidationError) ErrorName() string { return "GetAllRolesReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAllRolesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRolesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRolesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRolesReqValidationError{}

var _GetAllRolesReq_DomainName_Pattern = regexp.MustCompile("^[0-9a-zA-Z_]{1,}$")

// Validate checks the field values on GetAllRolesRpl with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAllRolesRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRolesRpl with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAllRolesRplMultiError,
// or nil if none found.
func (m *GetAllRolesRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRolesRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllRolesRplValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllRolesRplValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllRolesRplValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllRolesRplMultiError(errors)
	}

	return nil
}

// GetAllRolesRplMultiError is an error wrapping multiple validation errors
// returned by GetAllRolesRpl.ValidateAll() if the designated constraints
// aren't met.
type GetAllRolesRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRolesRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRolesRplMultiError) AllErrors() []error { return m }

// GetAllRolesRplValidationError is the validation error returned by
// GetAllRolesRpl.Validate if the designated constraints aren't met.
type GetAllRolesRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRolesRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRolesRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRolesRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRolesRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRolesRplValidationError) ErrorName() string { return "GetAllRolesRplValidationError" }

// Error satisfies the builtin error interface
func (e GetAllRolesRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRolesRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRolesRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRolesRplValidationError{}

// Validate checks the field values on AddRoleForSubInDomainReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRoleForSubInDomainReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleForSubInDomainReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRoleForSubInDomainReqMultiError, or nil if none found.
func (m *AddRoleForSubInDomainReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleForSubInDomainReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_AddRoleForSubInDomainReq_Sub_Pattern.MatchString(m.GetSub()) {
		err := AddRoleForSubInDomainReqValidationError{
			field:  "Sub",
			reason: "value does not match regex pattern \"^(.*):(.*)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddRoleForSubInDomainReq_Domain_Pattern.MatchString(m.GetDomain()) {
		err := AddRoleForSubInDomainReqValidationError{
			field:  "Domain",
			reason: "value does not match regex pattern \"^(.*):(.*)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddRoleForSubInDomainReq_Role_Pattern.MatchString(m.GetRole()) {
		err := AddRoleForSubInDomainReqValidationError{
			field:  "Role",
			reason: "value does not match regex pattern \"^(.*):(.*)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddRoleForSubInDomainReqMultiError(errors)
	}

	return nil
}

// AddRoleForSubInDomainReqMultiError is an error wrapping multiple validation
// errors returned by AddRoleForSubInDomainReq.ValidateAll() if the designated
// constraints aren't met.
type AddRoleForSubInDomainReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleForSubInDomainReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleForSubInDomainReqMultiError) AllErrors() []error { return m }

// AddRoleForSubInDomainReqValidationError is the validation error returned by
// AddRoleForSubInDomainReq.Validate if the designated constraints aren't met.
type AddRoleForSubInDomainReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleForSubInDomainReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleForSubInDomainReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleForSubInDomainReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleForSubInDomainReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleForSubInDomainReqValidationError) ErrorName() string {
	return "AddRoleForSubInDomainReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddRoleForSubInDomainReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleForSubInDomainReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleForSubInDomainReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleForSubInDomainReqValidationError{}

var _AddRoleForSubInDomainReq_Sub_Pattern = regexp.MustCompile("^(.*):(.*)$")

var _AddRoleForSubInDomainReq_Domain_Pattern = regexp.MustCompile("^(.*):(.*)$")

var _AddRoleForSubInDomainReq_Role_Pattern = regexp.MustCompile("^(.*):(.*)$")

// Validate checks the field values on AddRoleForSubInDomainRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRoleForSubInDomainRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleForSubInDomainRpl with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRoleForSubInDomainRplMultiError, or nil if none found.
func (m *AddRoleForSubInDomainRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleForSubInDomainRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return AddRoleForSubInDomainRplMultiError(errors)
	}

	return nil
}

// AddRoleForSubInDomainRplMultiError is an error wrapping multiple validation
// errors returned by AddRoleForSubInDomainRpl.ValidateAll() if the designated
// constraints aren't met.
type AddRoleForSubInDomainRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleForSubInDomainRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleForSubInDomainRplMultiError) AllErrors() []error { return m }

// AddRoleForSubInDomainRplValidationError is the validation error returned by
// AddRoleForSubInDomainRpl.Validate if the designated constraints aren't met.
type AddRoleForSubInDomainRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleForSubInDomainRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleForSubInDomainRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleForSubInDomainRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleForSubInDomainRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleForSubInDomainRplValidationError) ErrorName() string {
	return "AddRoleForSubInDomainRplValidationError"
}

// Error satisfies the builtin error interface
func (e AddRoleForSubInDomainRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleForSubInDomainRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleForSubInDomainRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleForSubInDomainRplValidationError{}

// Validate checks the field values on GetDomainSubsForRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDomainSubsForRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDomainSubsForRoleReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDomainSubsForRoleReqMultiError, or nil if none found.
func (m *GetDomainSubsForRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDomainSubsForRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetDomainSubsForRoleReq_DomainName_Pattern.MatchString(m.GetDomainName()) {
		err := GetDomainSubsForRoleReqValidationError{
			field:  "DomainName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_]{1,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetDomainSubsForRoleReq_RoleName_Pattern.MatchString(m.GetRoleName()) {
		err := GetDomainSubsForRoleReqValidationError{
			field:  "RoleName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_]{1,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDomainSubsForRoleReqMultiError(errors)
	}

	return nil
}

// GetDomainSubsForRoleReqMultiError is an error wrapping multiple validation
// errors returned by GetDomainSubsForRoleReq.ValidateAll() if the designated
// constraints aren't met.
type GetDomainSubsForRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDomainSubsForRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDomainSubsForRoleReqMultiError) AllErrors() []error { return m }

// GetDomainSubsForRoleReqValidationError is the validation error returned by
// GetDomainSubsForRoleReq.Validate if the designated constraints aren't met.
type GetDomainSubsForRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainSubsForRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainSubsForRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainSubsForRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainSubsForRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainSubsForRoleReqValidationError) ErrorName() string {
	return "GetDomainSubsForRoleReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDomainSubsForRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainSubsForRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainSubsForRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainSubsForRoleReqValidationError{}

var _GetDomainSubsForRoleReq_DomainName_Pattern = regexp.MustCompile("^[0-9a-zA-Z_]{1,}$")

var _GetDomainSubsForRoleReq_RoleName_Pattern = regexp.MustCompile("^[0-9a-zA-Z_]{1,}$")

// Validate checks the field values on GetDomainSubsForRoleRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDomainSubsForRoleRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDomainSubsForRoleRpl with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDomainSubsForRoleRplMultiError, or nil if none found.
func (m *GetDomainSubsForRoleRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDomainSubsForRoleRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDomainSubsForRoleRplValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDomainSubsForRoleRplValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDomainSubsForRoleRplValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDomainSubsForRoleRplMultiError(errors)
	}

	return nil
}

// GetDomainSubsForRoleRplMultiError is an error wrapping multiple validation
// errors returned by GetDomainSubsForRoleRpl.ValidateAll() if the designated
// constraints aren't met.
type GetDomainSubsForRoleRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDomainSubsForRoleRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDomainSubsForRoleRplMultiError) AllErrors() []error { return m }

// GetDomainSubsForRoleRplValidationError is the validation error returned by
// GetDomainSubsForRoleRpl.Validate if the designated constraints aren't met.
type GetDomainSubsForRoleRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainSubsForRoleRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainSubsForRoleRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainSubsForRoleRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainSubsForRoleRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainSubsForRoleRplValidationError) ErrorName() string {
	return "GetDomainSubsForRoleRplValidationError"
}

// Error satisfies the builtin error interface
func (e GetDomainSubsForRoleRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainSubsForRoleRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainSubsForRoleRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainSubsForRoleRplValidationError{}

// Validate checks the field values on DeleteRoleForSubInDomainReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleForSubInDomainReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleForSubInDomainReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleForSubInDomainReqMultiError, or nil if none found.
func (m *DeleteRoleForSubInDomainReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleForSubInDomainReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeleteRoleForSubInDomainReq_Sub_Pattern.MatchString(m.GetSub()) {
		err := DeleteRoleForSubInDomainReqValidationError{
			field:  "Sub",
			reason: "value does not match regex pattern \"^(.*):(.*)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteRoleForSubInDomainReq_Domain_Pattern.MatchString(m.GetDomain()) {
		err := DeleteRoleForSubInDomainReqValidationError{
			field:  "Domain",
			reason: "value does not match regex pattern \"^(.*):(.*)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteRoleForSubInDomainReq_Role_Pattern.MatchString(m.GetRole()) {
		err := DeleteRoleForSubInDomainReqValidationError{
			field:  "Role",
			reason: "value does not match regex pattern \"^(.*):(.*)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleForSubInDomainReqMultiError(errors)
	}

	return nil
}

// DeleteRoleForSubInDomainReqMultiError is an error wrapping multiple
// validation errors returned by DeleteRoleForSubInDomainReq.ValidateAll() if
// the designated constraints aren't met.
type DeleteRoleForSubInDomainReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleForSubInDomainReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleForSubInDomainReqMultiError) AllErrors() []error { return m }

// DeleteRoleForSubInDomainReqValidationError is the validation error returned
// by DeleteRoleForSubInDomainReq.Validate if the designated constraints
// aren't met.
type DeleteRoleForSubInDomainReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleForSubInDomainReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleForSubInDomainReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleForSubInDomainReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleForSubInDomainReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleForSubInDomainReqValidationError) ErrorName() string {
	return "DeleteRoleForSubInDomainReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleForSubInDomainReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleForSubInDomainReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleForSubInDomainReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleForSubInDomainReqValidationError{}

var _DeleteRoleForSubInDomainReq_Sub_Pattern = regexp.MustCompile("^(.*):(.*)$")

var _DeleteRoleForSubInDomainReq_Domain_Pattern = regexp.MustCompile("^(.*):(.*)$")

var _DeleteRoleForSubInDomainReq_Role_Pattern = regexp.MustCompile("^(.*):(.*)$")

// Validate checks the field values on DeleteRoleForSubInDomainRpl with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleForSubInDomainRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleForSubInDomainRpl with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleForSubInDomainRplMultiError, or nil if none found.
func (m *DeleteRoleForSubInDomainRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleForSubInDomainRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return DeleteRoleForSubInDomainRplMultiError(errors)
	}

	return nil
}

// DeleteRoleForSubInDomainRplMultiError is an error wrapping multiple
// validation errors returned by DeleteRoleForSubInDomainRpl.ValidateAll() if
// the designated constraints aren't met.
type DeleteRoleForSubInDomainRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleForSubInDomainRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleForSubInDomainRplMultiError) AllErrors() []error { return m }

// DeleteRoleForSubInDomainRplValidationError is the validation error returned
// by DeleteRoleForSubInDomainRpl.Validate if the designated constraints
// aren't met.
type DeleteRoleForSubInDomainRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleForSubInDomainRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleForSubInDomainRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleForSubInDomainRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleForSubInDomainRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleForSubInDomainRplValidationError) ErrorName() string {
	return "DeleteRoleForSubInDomainRplValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleForSubInDomainRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleForSubInDomainRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleForSubInDomainRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleForSubInDomainRplValidationError{}

// Validate checks the field values on AddDomainRoleRpl_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDomainRoleRpl_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDomainRoleRpl_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDomainRoleRpl_DataMultiError, or nil if none found.
func (m *AddDomainRoleRpl_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDomainRoleRpl_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDomainRoleRpl_DataValidationError{
					field:  "CreatTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDomainRoleRpl_DataValidationError{
					field:  "CreatTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDomainRoleRpl_DataValidationError{
				field:  "CreatTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Domain

	if len(errors) > 0 {
		return AddDomainRoleRpl_DataMultiError(errors)
	}

	return nil
}

// AddDomainRoleRpl_DataMultiError is an error wrapping multiple validation
// errors returned by AddDomainRoleRpl_Data.ValidateAll() if the designated
// constraints aren't met.
type AddDomainRoleRpl_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDomainRoleRpl_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDomainRoleRpl_DataMultiError) AllErrors() []error { return m }

// AddDomainRoleRpl_DataValidationError is the validation error returned by
// AddDomainRoleRpl_Data.Validate if the designated constraints aren't met.
type AddDomainRoleRpl_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDomainRoleRpl_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDomainRoleRpl_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDomainRoleRpl_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDomainRoleRpl_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDomainRoleRpl_DataValidationError) ErrorName() string {
	return "AddDomainRoleRpl_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AddDomainRoleRpl_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDomainRoleRpl_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDomainRoleRpl_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDomainRoleRpl_DataValidationError{}

// Validate checks the field values on UpdateDomainRoleRpl_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainRoleRpl_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainRoleRpl_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainRoleRpl_DataMultiError, or nil if none found.
func (m *UpdateDomainRoleRpl_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainRoleRpl_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDomainRoleRpl_DataValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDomainRoleRpl_DataValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDomainRoleRpl_DataValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Domain

	if len(errors) > 0 {
		return UpdateDomainRoleRpl_DataMultiError(errors)
	}

	return nil
}

// UpdateDomainRoleRpl_DataMultiError is an error wrapping multiple validation
// errors returned by UpdateDomainRoleRpl_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateDomainRoleRpl_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainRoleRpl_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainRoleRpl_DataMultiError) AllErrors() []error { return m }

// UpdateDomainRoleRpl_DataValidationError is the validation error returned by
// UpdateDomainRoleRpl_Data.Validate if the designated constraints aren't met.
type UpdateDomainRoleRpl_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainRoleRpl_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainRoleRpl_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainRoleRpl_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainRoleRpl_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainRoleRpl_DataValidationError) ErrorName() string {
	return "UpdateDomainRoleRpl_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainRoleRpl_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainRoleRpl_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainRoleRpl_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainRoleRpl_DataValidationError{}

// Validate checks the field values on DeleteDomainRoleRpl_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDomainRoleRpl_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDomainRoleRpl_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDomainRoleRpl_DataMultiError, or nil if none found.
func (m *DeleteDomainRoleRpl_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDomainRoleRpl_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeleteTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteDomainRoleRpl_DataValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteDomainRoleRpl_DataValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteDomainRoleRpl_DataValidationError{
				field:  "DeleteTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteDomainRoleRpl_DataMultiError(errors)
	}

	return nil
}

// DeleteDomainRoleRpl_DataMultiError is an error wrapping multiple validation
// errors returned by DeleteDomainRoleRpl_Data.ValidateAll() if the designated
// constraints aren't met.
type DeleteDomainRoleRpl_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDomainRoleRpl_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDomainRoleRpl_DataMultiError) AllErrors() []error { return m }

// DeleteDomainRoleRpl_DataValidationError is the validation error returned by
// DeleteDomainRoleRpl_Data.Validate if the designated constraints aren't met.
type DeleteDomainRoleRpl_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDomainRoleRpl_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDomainRoleRpl_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDomainRoleRpl_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDomainRoleRpl_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDomainRoleRpl_DataValidationError) ErrorName() string {
	return "DeleteDomainRoleRpl_DataValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDomainRoleRpl_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDomainRoleRpl_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDomainRoleRpl_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDomainRoleRpl_DataValidationError{}

// Validate checks the field values on GetAllRolesRpl_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllRolesRpl_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRolesRpl_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllRolesRpl_DataMultiError, or nil if none found.
func (m *GetAllRolesRpl_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRolesRpl_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllRolesRpl_DataValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllRolesRpl_DataValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllRolesRpl_DataValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllRolesRpl_DataValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllRolesRpl_DataValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllRolesRpl_DataValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Domain

	if len(errors) > 0 {
		return GetAllRolesRpl_DataMultiError(errors)
	}

	return nil
}

// GetAllRolesRpl_DataMultiError is an error wrapping multiple validation
// errors returned by GetAllRolesRpl_Data.ValidateAll() if the designated
// constraints aren't met.
type GetAllRolesRpl_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRolesRpl_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRolesRpl_DataMultiError) AllErrors() []error { return m }

// GetAllRolesRpl_DataValidationError is the validation error returned by
// GetAllRolesRpl_Data.Validate if the designated constraints aren't met.
type GetAllRolesRpl_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRolesRpl_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRolesRpl_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRolesRpl_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRolesRpl_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRolesRpl_DataValidationError) ErrorName() string {
	return "GetAllRolesRpl_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllRolesRpl_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRolesRpl_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRolesRpl_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRolesRpl_DataValidationError{}

// Validate checks the field values on GetDomainSubsForRoleRpl_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDomainSubsForRoleRpl_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDomainSubsForRoleRpl_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDomainSubsForRoleRpl_DataMultiError, or nil if none found.
func (m *GetDomainSubsForRoleRpl_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDomainSubsForRoleRpl_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sub

	if len(errors) > 0 {
		return GetDomainSubsForRoleRpl_DataMultiError(errors)
	}

	return nil
}

// GetDomainSubsForRoleRpl_DataMultiError is an error wrapping multiple
// validation errors returned by GetDomainSubsForRoleRpl_Data.ValidateAll() if
// the designated constraints aren't met.
type GetDomainSubsForRoleRpl_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDomainSubsForRoleRpl_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDomainSubsForRoleRpl_DataMultiError) AllErrors() []error { return m }

// GetDomainSubsForRoleRpl_DataValidationError is the validation error returned
// by GetDomainSubsForRoleRpl_Data.Validate if the designated constraints
// aren't met.
type GetDomainSubsForRoleRpl_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainSubsForRoleRpl_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainSubsForRoleRpl_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainSubsForRoleRpl_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainSubsForRoleRpl_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainSubsForRoleRpl_DataValidationError) ErrorName() string {
	return "GetDomainSubsForRoleRpl_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetDomainSubsForRoleRpl_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainSubsForRoleRpl_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainSubsForRoleRpl_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainSubsForRoleRpl_DataValidationError{}
