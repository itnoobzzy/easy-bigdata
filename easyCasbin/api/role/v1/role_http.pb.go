// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.19.3
// source: role/v1/role.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDomainRoleAddDomainRole = "/api.role.v1.DomainRole/AddDomainRole"
const OperationDomainRoleAddRoleForSubInDomain = "/api.role.v1.DomainRole/AddRoleForSubInDomain"
const OperationDomainRoleDeleteRole = "/api.role.v1.DomainRole/DeleteRole"
const OperationDomainRoleDeleteRoleForSubInDomain = "/api.role.v1.DomainRole/DeleteRoleForSubInDomain"
const OperationDomainRoleGetDomainRoles = "/api.role.v1.DomainRole/GetDomainRoles"
const OperationDomainRoleGetDomainSubsForRole = "/api.role.v1.DomainRole/GetDomainSubsForRole"
const OperationDomainRoleUpdateRoleInfo = "/api.role.v1.DomainRole/UpdateRoleInfo"

type DomainRoleHTTPServer interface {
	// AddDomainRole 添加域角色
	AddDomainRole(context.Context, *AddDomainRoleReq) (*AddDomainRoleRpl, error)
	// AddRoleForSubInDomain AddRoleForSubInDomain 为用户添加域角色或者为角色继承另一个角色权限
	AddRoleForSubInDomain(context.Context, *AddRoleForSubInDomainReq) (*AddRoleForSubInDomainRpl, error)
	// DeleteRole DeleteRole 删除对应域的角色
	DeleteRole(context.Context, *DeleteDomainRoleReq) (*DeleteDomainRoleRpl, error)
	// DeleteRoleForSubInDomain DeleteRoleForSubInDomain 删除角色下subject（鉴权主体）
	DeleteRoleForSubInDomain(context.Context, *DeleteRoleForSubInDomainReq) (*DeleteRoleForSubInDomainRpl, error)
	// GetDomainRoles GetDomainRoles 获取指定域下所有角色
	GetDomainRoles(context.Context, *GetAllRolesReq) (*GetAllRolesRpl, error)
	// GetDomainSubsForRole GetDomainSubsForRole 获取指定域角色下所有用户
	GetDomainSubsForRole(context.Context, *GetDomainSubsForRoleReq) (*GetDomainSubsForRoleRpl, error)
	// UpdateRoleInfo 更新域角色信息
	UpdateRoleInfo(context.Context, *UpdateDomainRoleReq) (*UpdateDomainRoleRpl, error)
}

func RegisterDomainRoleHTTPServer(s *http.Server, srv DomainRoleHTTPServer) {
	r := s.Route("/")
	r.POST("/easyCasbin/api/v1/domain_role", _DomainRole_AddDomainRole0_HTTP_Handler(srv))
	r.PUT("/easyCasbin/api/v1/domain_role", _DomainRole_UpdateRoleInfo0_HTTP_Handler(srv))
	r.DELETE("/easyCasbin/api/v1/domain_role", _DomainRole_DeleteRole0_HTTP_Handler(srv))
	r.GET("/easyCasbin/api/v1/domain_roles/{domainName}", _DomainRole_GetDomainRoles0_HTTP_Handler(srv))
	r.GET("/easyCasbin/api/v1/domain_roles/subs", _DomainRole_GetDomainSubsForRole0_HTTP_Handler(srv))
	r.POST("/easyCasbin/api/v1/domain_roles/{domain}/{sub}/role", _DomainRole_AddRoleForSubInDomain0_HTTP_Handler(srv))
	r.DELETE("/easyCasbin/api/v1/domain_roles/{domain}/role_sub", _DomainRole_DeleteRoleForSubInDomain0_HTTP_Handler(srv))
}

func _DomainRole_AddDomainRole0_HTTP_Handler(srv DomainRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddDomainRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainRoleAddDomainRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddDomainRole(ctx, req.(*AddDomainRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddDomainRoleRpl)
		return ctx.Result(200, reply)
	}
}

func _DomainRole_UpdateRoleInfo0_HTTP_Handler(srv DomainRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainRoleUpdateRoleInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRoleInfo(ctx, req.(*UpdateDomainRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainRoleRpl)
		return ctx.Result(200, reply)
	}
}

func _DomainRole_DeleteRole0_HTTP_Handler(srv DomainRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDomainRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainRoleDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteDomainRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDomainRoleRpl)
		return ctx.Result(200, reply)
	}
}

func _DomainRole_GetDomainRoles0_HTTP_Handler(srv DomainRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAllRolesReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainRoleGetDomainRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomainRoles(ctx, req.(*GetAllRolesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAllRolesRpl)
		return ctx.Result(200, reply)
	}
}

func _DomainRole_GetDomainSubsForRole0_HTTP_Handler(srv DomainRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainSubsForRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainRoleGetDomainSubsForRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomainSubsForRole(ctx, req.(*GetDomainSubsForRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDomainSubsForRoleRpl)
		return ctx.Result(200, reply)
	}
}

func _DomainRole_AddRoleForSubInDomain0_HTTP_Handler(srv DomainRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRoleForSubInDomainReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainRoleAddRoleForSubInDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddRoleForSubInDomain(ctx, req.(*AddRoleForSubInDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddRoleForSubInDomainRpl)
		return ctx.Result(200, reply)
	}
}

func _DomainRole_DeleteRoleForSubInDomain0_HTTP_Handler(srv DomainRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleForSubInDomainReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainRoleDeleteRoleForSubInDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoleForSubInDomain(ctx, req.(*DeleteRoleForSubInDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleForSubInDomainRpl)
		return ctx.Result(200, reply)
	}
}

type DomainRoleHTTPClient interface {
	AddDomainRole(ctx context.Context, req *AddDomainRoleReq, opts ...http.CallOption) (rsp *AddDomainRoleRpl, err error)
	AddRoleForSubInDomain(ctx context.Context, req *AddRoleForSubInDomainReq, opts ...http.CallOption) (rsp *AddRoleForSubInDomainRpl, err error)
	DeleteRole(ctx context.Context, req *DeleteDomainRoleReq, opts ...http.CallOption) (rsp *DeleteDomainRoleRpl, err error)
	DeleteRoleForSubInDomain(ctx context.Context, req *DeleteRoleForSubInDomainReq, opts ...http.CallOption) (rsp *DeleteRoleForSubInDomainRpl, err error)
	GetDomainRoles(ctx context.Context, req *GetAllRolesReq, opts ...http.CallOption) (rsp *GetAllRolesRpl, err error)
	GetDomainSubsForRole(ctx context.Context, req *GetDomainSubsForRoleReq, opts ...http.CallOption) (rsp *GetDomainSubsForRoleRpl, err error)
	UpdateRoleInfo(ctx context.Context, req *UpdateDomainRoleReq, opts ...http.CallOption) (rsp *UpdateDomainRoleRpl, err error)
}

type DomainRoleHTTPClientImpl struct {
	cc *http.Client
}

func NewDomainRoleHTTPClient(client *http.Client) DomainRoleHTTPClient {
	return &DomainRoleHTTPClientImpl{client}
}

func (c *DomainRoleHTTPClientImpl) AddDomainRole(ctx context.Context, in *AddDomainRoleReq, opts ...http.CallOption) (*AddDomainRoleRpl, error) {
	var out AddDomainRoleRpl
	pattern := "/easyCasbin/api/v1/domain_role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainRoleAddDomainRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainRoleHTTPClientImpl) AddRoleForSubInDomain(ctx context.Context, in *AddRoleForSubInDomainReq, opts ...http.CallOption) (*AddRoleForSubInDomainRpl, error) {
	var out AddRoleForSubInDomainRpl
	pattern := "/easyCasbin/api/v1/domain_roles/{domain}/{sub}/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainRoleAddRoleForSubInDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainRoleHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteDomainRoleReq, opts ...http.CallOption) (*DeleteDomainRoleRpl, error) {
	var out DeleteDomainRoleRpl
	pattern := "/easyCasbin/api/v1/domain_role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainRoleDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainRoleHTTPClientImpl) DeleteRoleForSubInDomain(ctx context.Context, in *DeleteRoleForSubInDomainReq, opts ...http.CallOption) (*DeleteRoleForSubInDomainRpl, error) {
	var out DeleteRoleForSubInDomainRpl
	pattern := "/easyCasbin/api/v1/domain_roles/{domain}/role_sub"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainRoleDeleteRoleForSubInDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainRoleHTTPClientImpl) GetDomainRoles(ctx context.Context, in *GetAllRolesReq, opts ...http.CallOption) (*GetAllRolesRpl, error) {
	var out GetAllRolesRpl
	pattern := "/easyCasbin/api/v1/domain_roles/{domainName}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainRoleGetDomainRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainRoleHTTPClientImpl) GetDomainSubsForRole(ctx context.Context, in *GetDomainSubsForRoleReq, opts ...http.CallOption) (*GetDomainSubsForRoleRpl, error) {
	var out GetDomainSubsForRoleRpl
	pattern := "/easyCasbin/api/v1/domain_roles/subs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainRoleGetDomainSubsForRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainRoleHTTPClientImpl) UpdateRoleInfo(ctx context.Context, in *UpdateDomainRoleReq, opts ...http.CallOption) (*UpdateDomainRoleRpl, error) {
	var out UpdateDomainRoleRpl
	pattern := "/easyCasbin/api/v1/domain_role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainRoleUpdateRoleInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
