// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: casbin_rule/v1/casbin_rule.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAllSubjectsRpl with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllSubjectsRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllSubjectsRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllSubjectsRplMultiError, or nil if none found.
func (m *GetAllSubjectsRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllSubjectsRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllSubjectsRplValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllSubjectsRplValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllSubjectsRplValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllSubjectsRplMultiError(errors)
	}

	return nil
}

// GetAllSubjectsRplMultiError is an error wrapping multiple validation errors
// returned by GetAllSubjectsRpl.ValidateAll() if the designated constraints
// aren't met.
type GetAllSubjectsRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllSubjectsRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllSubjectsRplMultiError) AllErrors() []error { return m }

// GetAllSubjectsRplValidationError is the validation error returned by
// GetAllSubjectsRpl.Validate if the designated constraints aren't met.
type GetAllSubjectsRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllSubjectsRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllSubjectsRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllSubjectsRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllSubjectsRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllSubjectsRplValidationError) ErrorName() string {
	return "GetAllSubjectsRplValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllSubjectsRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllSubjectsRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllSubjectsRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllSubjectsRplValidationError{}

// Validate checks the field values on DeleteDomainReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDomainReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDomainReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDomainReqMultiError, or nil if none found.
func (m *DeleteDomainReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDomainReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := DeleteDomainReqValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDomainReqMultiError(errors)
	}

	return nil
}

// DeleteDomainReqMultiError is an error wrapping multiple validation errors
// returned by DeleteDomainReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteDomainReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDomainReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDomainReqMultiError) AllErrors() []error { return m }

// DeleteDomainReqValidationError is the validation error returned by
// DeleteDomainReq.Validate if the designated constraints aren't met.
type DeleteDomainReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDomainReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDomainReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDomainReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDomainReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDomainReqValidationError) ErrorName() string { return "DeleteDomainReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDomainReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDomainReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDomainReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDomainReqValidationError{}

// Validate checks the field values on DeleteDomainRpl with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDomainRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDomainRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDomainRplMultiError, or nil if none found.
func (m *DeleteDomainRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDomainRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return DeleteDomainRplMultiError(errors)
	}

	return nil
}

// DeleteDomainRplMultiError is an error wrapping multiple validation errors
// returned by DeleteDomainRpl.ValidateAll() if the designated constraints
// aren't met.
type DeleteDomainRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDomainRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDomainRplMultiError) AllErrors() []error { return m }

// DeleteDomainRplValidationError is the validation error returned by
// DeleteDomainRpl.Validate if the designated constraints aren't met.
type DeleteDomainRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDomainRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDomainRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDomainRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDomainRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDomainRplValidationError) ErrorName() string { return "DeleteDomainRplValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDomainRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDomainRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDomainRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDomainRplValidationError{}

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PolicyMultiError, or nil if none found.
func (m *Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PolicyValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := PolicyValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetResource()) < 1 {
		err := PolicyValidationError{
			field:  "Resource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAction()) < 1 {
		err := PolicyValidationError{
			field:  "Action",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Eft

	if len(errors) > 0 {
		return PolicyMultiError(errors)
	}

	return nil
}

// PolicyMultiError is an error wrapping multiple validation errors returned by
// Policy.ValidateAll() if the designated constraints aren't met.
type PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyMultiError) AllErrors() []error { return m }

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyValidationError) ErrorName() string { return "PolicyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyValidationError{}

// Validate checks the field values on BatchEnforceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BatchEnforceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchEnforceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchEnforceReqMultiError, or nil if none found.
func (m *BatchEnforceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchEnforceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPolicies()) < 1 {
		err := BatchEnforceReqValidationError{
			field:  "Policies",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchEnforceReqValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchEnforceReqValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchEnforceReqValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchEnforceReqMultiError(errors)
	}

	return nil
}

// BatchEnforceReqMultiError is an error wrapping multiple validation errors
// returned by BatchEnforceReq.ValidateAll() if the designated constraints
// aren't met.
type BatchEnforceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchEnforceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchEnforceReqMultiError) AllErrors() []error { return m }

// BatchEnforceReqValidationError is the validation error returned by
// BatchEnforceReq.Validate if the designated constraints aren't met.
type BatchEnforceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchEnforceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchEnforceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchEnforceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchEnforceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchEnforceReqValidationError) ErrorName() string { return "BatchEnforceReqValidationError" }

// Error satisfies the builtin error interface
func (e BatchEnforceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchEnforceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchEnforceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchEnforceReqValidationError{}

// Validate checks the field values on BatchEnforceRpl with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BatchEnforceRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchEnforceRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchEnforceRplMultiError, or nil if none found.
func (m *BatchEnforceRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchEnforceRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return BatchEnforceRplMultiError(errors)
	}

	return nil
}

// BatchEnforceRplMultiError is an error wrapping multiple validation errors
// returned by BatchEnforceRpl.ValidateAll() if the designated constraints
// aren't met.
type BatchEnforceRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchEnforceRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchEnforceRplMultiError) AllErrors() []error { return m }

// BatchEnforceRplValidationError is the validation error returned by
// BatchEnforceRpl.Validate if the designated constraints aren't met.
type BatchEnforceRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchEnforceRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchEnforceRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchEnforceRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchEnforceRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchEnforceRplValidationError) ErrorName() string { return "BatchEnforceRplValidationError" }

// Error satisfies the builtin error interface
func (e BatchEnforceRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchEnforceRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchEnforceRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchEnforceRplValidationError{}

// Validate checks the field values on AddPermissionsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddPermissionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPermissionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPermissionsReqMultiError, or nil if none found.
func (m *AddPermissionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPermissionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPolicies()) < 1 {
		err := AddPermissionsReqValidationError{
			field:  "Policies",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddPermissionsReqValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddPermissionsReqValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddPermissionsReqValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddPermissionsReqMultiError(errors)
	}

	return nil
}

// AddPermissionsReqMultiError is an error wrapping multiple validation errors
// returned by AddPermissionsReq.ValidateAll() if the designated constraints
// aren't met.
type AddPermissionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPermissionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPermissionsReqMultiError) AllErrors() []error { return m }

// AddPermissionsReqValidationError is the validation error returned by
// AddPermissionsReq.Validate if the designated constraints aren't met.
type AddPermissionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPermissionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPermissionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPermissionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPermissionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPermissionsReqValidationError) ErrorName() string {
	return "AddPermissionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddPermissionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPermissionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPermissionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPermissionsReqValidationError{}

// Validate checks the field values on AddPermissionsRpl with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddPermissionsRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPermissionsRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPermissionsRplMultiError, or nil if none found.
func (m *AddPermissionsRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPermissionsRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return AddPermissionsRplMultiError(errors)
	}

	return nil
}

// AddPermissionsRplMultiError is an error wrapping multiple validation errors
// returned by AddPermissionsRpl.ValidateAll() if the designated constraints
// aren't met.
type AddPermissionsRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPermissionsRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPermissionsRplMultiError) AllErrors() []error { return m }

// AddPermissionsRplValidationError is the validation error returned by
// AddPermissionsRpl.Validate if the designated constraints aren't met.
type AddPermissionsRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPermissionsRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPermissionsRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPermissionsRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPermissionsRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPermissionsRplValidationError) ErrorName() string {
	return "AddPermissionsRplValidationError"
}

// Error satisfies the builtin error interface
func (e AddPermissionsRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPermissionsRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPermissionsRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPermissionsRplValidationError{}

// Validate checks the field values on GetPermissionsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionsReqMultiError, or nil if none found.
func (m *GetPermissionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sub

	// no validation rules for Domain

	if len(errors) > 0 {
		return GetPermissionsReqMultiError(errors)
	}

	return nil
}

// GetPermissionsReqMultiError is an error wrapping multiple validation errors
// returned by GetPermissionsReq.ValidateAll() if the designated constraints
// aren't met.
type GetPermissionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionsReqMultiError) AllErrors() []error { return m }

// GetPermissionsReqValidationError is the validation error returned by
// GetPermissionsReq.Validate if the designated constraints aren't met.
type GetPermissionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsReqValidationError) ErrorName() string {
	return "GetPermissionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsReqValidationError{}

// Validate checks the field values on GetPermissionsRpl with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionsRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionsRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionsRplMultiError, or nil if none found.
func (m *GetPermissionsRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionsRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPermissionsRplValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPermissionsRplValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPermissionsRplValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPermissionsRplMultiError(errors)
	}

	return nil
}

// GetPermissionsRplMultiError is an error wrapping multiple validation errors
// returned by GetPermissionsRpl.ValidateAll() if the designated constraints
// aren't met.
type GetPermissionsRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionsRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionsRplMultiError) AllErrors() []error { return m }

// GetPermissionsRplValidationError is the validation error returned by
// GetPermissionsRpl.Validate if the designated constraints aren't met.
type GetPermissionsRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsRplValidationError) ErrorName() string {
	return "GetPermissionsRplValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsRplValidationError{}

// Validate checks the field values on UpdatePermissionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePermissionsReqMultiError, or nil if none found.
func (m *UpdatePermissionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPolicies()) < 1 {
		err := UpdatePermissionsReqValidationError{
			field:  "Policies",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePermissionsReqValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePermissionsReqValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePermissionsReqValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdatePermissionsReqMultiError(errors)
	}

	return nil
}

// UpdatePermissionsReqMultiError is an error wrapping multiple validation
// errors returned by UpdatePermissionsReq.ValidateAll() if the designated
// constraints aren't met.
type UpdatePermissionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionsReqMultiError) AllErrors() []error { return m }

// UpdatePermissionsReqValidationError is the validation error returned by
// UpdatePermissionsReq.Validate if the designated constraints aren't met.
type UpdatePermissionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionsReqValidationError) ErrorName() string {
	return "UpdatePermissionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionsReqValidationError{}

// Validate checks the field values on UpdatePermissionsRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionsRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionsRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePermissionsRplMultiError, or nil if none found.
func (m *UpdatePermissionsRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionsRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return UpdatePermissionsRplMultiError(errors)
	}

	return nil
}

// UpdatePermissionsRplMultiError is an error wrapping multiple validation
// errors returned by UpdatePermissionsRpl.ValidateAll() if the designated
// constraints aren't met.
type UpdatePermissionsRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionsRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionsRplMultiError) AllErrors() []error { return m }

// UpdatePermissionsRplValidationError is the validation error returned by
// UpdatePermissionsRpl.Validate if the designated constraints aren't met.
type UpdatePermissionsRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionsRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionsRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionsRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionsRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionsRplValidationError) ErrorName() string {
	return "UpdatePermissionsRplValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionsRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionsRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionsRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionsRplValidationError{}

// Validate checks the field values on DeletePermissionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePermissionsReqMultiError, or nil if none found.
func (m *DeletePermissionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPolicies()) < 1 {
		err := DeletePermissionsReqValidationError{
			field:  "Policies",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeletePermissionsReqValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeletePermissionsReqValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeletePermissionsReqValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeletePermissionsReqMultiError(errors)
	}

	return nil
}

// DeletePermissionsReqMultiError is an error wrapping multiple validation
// errors returned by DeletePermissionsReq.ValidateAll() if the designated
// constraints aren't met.
type DeletePermissionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionsReqMultiError) AllErrors() []error { return m }

// DeletePermissionsReqValidationError is the validation error returned by
// DeletePermissionsReq.Validate if the designated constraints aren't met.
type DeletePermissionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionsReqValidationError) ErrorName() string {
	return "DeletePermissionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionsReqValidationError{}

// Validate checks the field values on DeletePermissionsRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionsRpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionsRpl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePermissionsRplMultiError, or nil if none found.
func (m *DeletePermissionsRpl) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionsRpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return DeletePermissionsRplMultiError(errors)
	}

	return nil
}

// DeletePermissionsRplMultiError is an error wrapping multiple validation
// errors returned by DeletePermissionsRpl.ValidateAll() if the designated
// constraints aren't met.
type DeletePermissionsRplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionsRplMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionsRplMultiError) AllErrors() []error { return m }

// DeletePermissionsRplValidationError is the validation error returned by
// DeletePermissionsRpl.Validate if the designated constraints aren't met.
type DeletePermissionsRplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionsRplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionsRplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionsRplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionsRplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionsRplValidationError) ErrorName() string {
	return "DeletePermissionsRplValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionsRplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionsRpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionsRplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionsRplValidationError{}

// Validate checks the field values on GetAllSubjectsRpl_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllSubjectsRpl_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllSubjectsRpl_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllSubjectsRpl_DataMultiError, or nil if none found.
func (m *GetAllSubjectsRpl_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllSubjectsRpl_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sub

	if len(errors) > 0 {
		return GetAllSubjectsRpl_DataMultiError(errors)
	}

	return nil
}

// GetAllSubjectsRpl_DataMultiError is an error wrapping multiple validation
// errors returned by GetAllSubjectsRpl_Data.ValidateAll() if the designated
// constraints aren't met.
type GetAllSubjectsRpl_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllSubjectsRpl_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllSubjectsRpl_DataMultiError) AllErrors() []error { return m }

// GetAllSubjectsRpl_DataValidationError is the validation error returned by
// GetAllSubjectsRpl_Data.Validate if the designated constraints aren't met.
type GetAllSubjectsRpl_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllSubjectsRpl_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllSubjectsRpl_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllSubjectsRpl_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllSubjectsRpl_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllSubjectsRpl_DataValidationError) ErrorName() string {
	return "GetAllSubjectsRpl_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllSubjectsRpl_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllSubjectsRpl_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllSubjectsRpl_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllSubjectsRpl_DataValidationError{}

// Validate checks the field values on GetPermissionsRpl_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionsRpl_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionsRpl_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionsRpl_DataMultiError, or nil if none found.
func (m *GetPermissionsRpl_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionsRpl_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Resource

	// no validation rules for Action

	if len(errors) > 0 {
		return GetPermissionsRpl_DataMultiError(errors)
	}

	return nil
}

// GetPermissionsRpl_DataMultiError is an error wrapping multiple validation
// errors returned by GetPermissionsRpl_Data.ValidateAll() if the designated
// constraints aren't met.
type GetPermissionsRpl_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionsRpl_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionsRpl_DataMultiError) AllErrors() []error { return m }

// GetPermissionsRpl_DataValidationError is the validation error returned by
// GetPermissionsRpl_Data.Validate if the designated constraints aren't met.
type GetPermissionsRpl_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsRpl_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsRpl_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsRpl_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsRpl_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsRpl_DataValidationError) ErrorName() string {
	return "GetPermissionsRpl_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsRpl_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsRpl_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsRpl_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsRpl_DataValidationError{}
