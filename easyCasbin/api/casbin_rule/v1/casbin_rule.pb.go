// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.3
// source: casbin_rule/v1/casbin_rule.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/go-kratos/kratos/v2/errors"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CasbinRuleError int32

const (
	// 内部错误
	CasbinRuleError_INTERNAL_ERR CasbinRuleError = 0
	// 域不存在
	CasbinRuleError_DOMAIN_NOT_FOUND CasbinRuleError = 1
	// 参数错误
	CasbinRuleError_INVALID_ARGS CasbinRuleError = 2
)

// Enum value maps for CasbinRuleError.
var (
	CasbinRuleError_name = map[int32]string{
		0: "INTERNAL_ERR",
		1: "DOMAIN_NOT_FOUND",
		2: "INVALID_ARGS",
	}
	CasbinRuleError_value = map[string]int32{
		"INTERNAL_ERR":     0,
		"DOMAIN_NOT_FOUND": 1,
		"INVALID_ARGS":     2,
	}
)

func (x CasbinRuleError) Enum() *CasbinRuleError {
	p := new(CasbinRuleError)
	*p = x
	return p
}

func (x CasbinRuleError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CasbinRuleError) Descriptor() protoreflect.EnumDescriptor {
	return file_casbin_rule_v1_casbin_rule_proto_enumTypes[0].Descriptor()
}

func (CasbinRuleError) Type() protoreflect.EnumType {
	return &file_casbin_rule_v1_casbin_rule_proto_enumTypes[0]
}

func (x CasbinRuleError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CasbinRuleError.Descriptor instead.
func (CasbinRuleError) EnumDescriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{0}
}

type GetAllSubjectsRpl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*GetAllSubjectsRpl_Data `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAllSubjectsRpl) Reset() {
	*x = GetAllSubjectsRpl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSubjectsRpl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSubjectsRpl) ProtoMessage() {}

func (x *GetAllSubjectsRpl) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSubjectsRpl.ProtoReflect.Descriptor instead.
func (*GetAllSubjectsRpl) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllSubjectsRpl) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllSubjectsRpl) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAllSubjectsRpl) GetData() []*GetAllSubjectsRpl_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteDomainReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *DeleteDomainReq) Reset() {
	*x = DeleteDomainReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDomainReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDomainReq) ProtoMessage() {}

func (x *DeleteDomainReq) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDomainReq.ProtoReflect.Descriptor instead.
func (*DeleteDomainReq) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteDomainReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type DeleteDomainRpl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteDomainRpl) Reset() {
	*x = DeleteDomainRpl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDomainRpl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDomainRpl) ProtoMessage() {}

func (x *DeleteDomainRpl) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDomainRpl.ProtoReflect.Descriptor instead.
func (*DeleteDomainRpl) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteDomainRpl) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteDomainRpl) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Domain   string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Resource string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	Action   string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Eft      string `protobuf:"bytes,5,opt,name=eft,proto3" json:"eft,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{3}
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Policy) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Policy) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Policy) GetEft() string {
	if x != nil {
		return x.Eft
	}
	return ""
}

type BatchEnforceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *BatchEnforceReq) Reset() {
	*x = BatchEnforceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEnforceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEnforceReq) ProtoMessage() {}

func (x *BatchEnforceReq) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEnforceReq.ProtoReflect.Descriptor instead.
func (*BatchEnforceReq) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{4}
}

func (x *BatchEnforceReq) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type BatchEnforceRpl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []bool `protobuf:"varint,3,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchEnforceRpl) Reset() {
	*x = BatchEnforceRpl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEnforceRpl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEnforceRpl) ProtoMessage() {}

func (x *BatchEnforceRpl) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEnforceRpl.ProtoReflect.Descriptor instead.
func (*BatchEnforceRpl) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{5}
}

func (x *BatchEnforceRpl) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BatchEnforceRpl) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchEnforceRpl) GetData() []bool {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddPermissionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *AddPermissionsReq) Reset() {
	*x = AddPermissionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPermissionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPermissionsReq) ProtoMessage() {}

func (x *AddPermissionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPermissionsReq.ProtoReflect.Descriptor instead.
func (*AddPermissionsReq) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{6}
}

func (x *AddPermissionsReq) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type AddPermissionsRpl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddPermissionsRpl) Reset() {
	*x = AddPermissionsRpl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPermissionsRpl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPermissionsRpl) ProtoMessage() {}

func (x *AddPermissionsRpl) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPermissionsRpl.ProtoReflect.Descriptor instead.
func (*AddPermissionsRpl) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{7}
}

func (x *AddPermissionsRpl) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddPermissionsRpl) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetPermissionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sub    string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *GetPermissionsReq) Reset() {
	*x = GetPermissionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermissionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsReq) ProtoMessage() {}

func (x *GetPermissionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsReq.ProtoReflect.Descriptor instead.
func (*GetPermissionsReq) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{8}
}

func (x *GetPermissionsReq) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *GetPermissionsReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type GetPermissionsRpl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*GetPermissionsRpl_Data `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPermissionsRpl) Reset() {
	*x = GetPermissionsRpl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermissionsRpl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsRpl) ProtoMessage() {}

func (x *GetPermissionsRpl) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsRpl.ProtoReflect.Descriptor instead.
func (*GetPermissionsRpl) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{9}
}

func (x *GetPermissionsRpl) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPermissionsRpl) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPermissionsRpl) GetData() []*GetPermissionsRpl_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdatePermissionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *UpdatePermissionsReq) Reset() {
	*x = UpdatePermissionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePermissionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePermissionsReq) ProtoMessage() {}

func (x *UpdatePermissionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePermissionsReq.ProtoReflect.Descriptor instead.
func (*UpdatePermissionsReq) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{10}
}

func (x *UpdatePermissionsReq) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type UpdatePermissionsRpl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdatePermissionsRpl) Reset() {
	*x = UpdatePermissionsRpl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePermissionsRpl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePermissionsRpl) ProtoMessage() {}

func (x *UpdatePermissionsRpl) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePermissionsRpl.ProtoReflect.Descriptor instead.
func (*UpdatePermissionsRpl) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePermissionsRpl) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdatePermissionsRpl) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeletePermissionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *DeletePermissionsReq) Reset() {
	*x = DeletePermissionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePermissionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePermissionsReq) ProtoMessage() {}

func (x *DeletePermissionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePermissionsReq.ProtoReflect.Descriptor instead.
func (*DeletePermissionsReq) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{12}
}

func (x *DeletePermissionsReq) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type DeletePermissionsRpl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeletePermissionsRpl) Reset() {
	*x = DeletePermissionsRpl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePermissionsRpl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePermissionsRpl) ProtoMessage() {}

func (x *DeletePermissionsRpl) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePermissionsRpl.ProtoReflect.Descriptor instead.
func (*DeletePermissionsRpl) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{13}
}

func (x *DeletePermissionsRpl) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeletePermissionsRpl) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAllSubjectsRpl_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (x *GetAllSubjectsRpl_Data) Reset() {
	*x = GetAllSubjectsRpl_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSubjectsRpl_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSubjectsRpl_Data) ProtoMessage() {}

func (x *GetAllSubjectsRpl_Data) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSubjectsRpl_Data.ProtoReflect.Descriptor instead.
func (*GetAllSubjectsRpl_Data) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GetAllSubjectsRpl_Data) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

type GetPermissionsRpl_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Action   string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *GetPermissionsRpl_Data) Reset() {
	*x = GetPermissionsRpl_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermissionsRpl_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsRpl_Data) ProtoMessage() {}

func (x *GetPermissionsRpl_Data) ProtoReflect() protoreflect.Message {
	mi := &file_casbin_rule_v1_casbin_rule_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsRpl_Data.ProtoReflect.Descriptor instead.
func (*GetPermissionsRpl_Data) Descriptor() ([]byte, []int) {
	return file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetPermissionsRpl_Data) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *GetPermissionsRpl_Data) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

var File_casbin_rule_v1_casbin_rule_proto protoreflect.FileDescriptor

var file_casbin_rule_v1_casbin_rule_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9b, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x70, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x70, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x18, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x22, 0x32, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x22, 0x3f, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x70, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x66, 0x74, 0x22, 0x53, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x70, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a,
	0x11, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69,
	0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x70, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x70, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x70, 0x6c, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3a, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x40,
	0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x22, 0x44, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x70, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x40,
	0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x22, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x70, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x63, 0x0a, 0x0f, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x0c, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x00, 0x1a, 0x04, 0xa8, 0x45, 0xf4,
	0x03, 0x12, 0x1a, 0x0a, 0x10, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03, 0x12, 0x16, 0x0a,
	0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x53, 0x10, 0x02, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x1a, 0x04, 0xa0, 0x45, 0xf4, 0x03, 0x32, 0x9e, 0x08, 0x0a, 0x0a,
	0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x7c, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69,
	0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x70, 0x6c, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x65, 0x61, 0x73, 0x79, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x70, 0x6c, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x65, 0x61,
	0x73, 0x79, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x73,
	0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x94, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x70, 0x6c, 0x22, 0x3a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x65, 0x61, 0x73, 0x79, 0x43,
	0x61, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x70, 0x6c, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x65, 0x61, 0x73, 0x79, 0x43, 0x61, 0x73, 0x62,
	0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69,
	0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x70, 0x6c, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x65, 0x61, 0x73,
	0x79, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x73, 0x62,
	0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73,
	0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x70, 0x6c,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x1a, 0x2a, 0x2f, 0x65, 0x61,
	0x73, 0x79, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x73,
	0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61,
	0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x70,
	0x6c, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x65,
	0x61, 0x73, 0x79, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61,
	0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x38, 0x0a, 0x12,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x50, 0x01, 0x5a, 0x20, 0x65, 0x61, 0x73, 0x79, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_casbin_rule_v1_casbin_rule_proto_rawDescOnce sync.Once
	file_casbin_rule_v1_casbin_rule_proto_rawDescData = file_casbin_rule_v1_casbin_rule_proto_rawDesc
)

func file_casbin_rule_v1_casbin_rule_proto_rawDescGZIP() []byte {
	file_casbin_rule_v1_casbin_rule_proto_rawDescOnce.Do(func() {
		file_casbin_rule_v1_casbin_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_casbin_rule_v1_casbin_rule_proto_rawDescData)
	})
	return file_casbin_rule_v1_casbin_rule_proto_rawDescData
}

var file_casbin_rule_v1_casbin_rule_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_casbin_rule_v1_casbin_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_casbin_rule_v1_casbin_rule_proto_goTypes = []interface{}{
	(CasbinRuleError)(0),           // 0: api.casbin_rule.v1.CasbinRuleError
	(*GetAllSubjectsRpl)(nil),      // 1: api.casbin_rule.v1.GetAllSubjectsRpl
	(*DeleteDomainReq)(nil),        // 2: api.casbin_rule.v1.DeleteDomainReq
	(*DeleteDomainRpl)(nil),        // 3: api.casbin_rule.v1.DeleteDomainRpl
	(*Policy)(nil),                 // 4: api.casbin_rule.v1.Policy
	(*BatchEnforceReq)(nil),        // 5: api.casbin_rule.v1.BatchEnforceReq
	(*BatchEnforceRpl)(nil),        // 6: api.casbin_rule.v1.BatchEnforceRpl
	(*AddPermissionsReq)(nil),      // 7: api.casbin_rule.v1.AddPermissionsReq
	(*AddPermissionsRpl)(nil),      // 8: api.casbin_rule.v1.AddPermissionsRpl
	(*GetPermissionsReq)(nil),      // 9: api.casbin_rule.v1.GetPermissionsReq
	(*GetPermissionsRpl)(nil),      // 10: api.casbin_rule.v1.GetPermissionsRpl
	(*UpdatePermissionsReq)(nil),   // 11: api.casbin_rule.v1.UpdatePermissionsReq
	(*UpdatePermissionsRpl)(nil),   // 12: api.casbin_rule.v1.UpdatePermissionsRpl
	(*DeletePermissionsReq)(nil),   // 13: api.casbin_rule.v1.DeletePermissionsReq
	(*DeletePermissionsRpl)(nil),   // 14: api.casbin_rule.v1.DeletePermissionsRpl
	(*GetAllSubjectsRpl_Data)(nil), // 15: api.casbin_rule.v1.GetAllSubjectsRpl.Data
	(*GetPermissionsRpl_Data)(nil), // 16: api.casbin_rule.v1.GetPermissionsRpl.Data
	(*emptypb.Empty)(nil),          // 17: google.protobuf.Empty
}
var file_casbin_rule_v1_casbin_rule_proto_depIdxs = []int32{
	15, // 0: api.casbin_rule.v1.GetAllSubjectsRpl.data:type_name -> api.casbin_rule.v1.GetAllSubjectsRpl.Data
	4,  // 1: api.casbin_rule.v1.BatchEnforceReq.policies:type_name -> api.casbin_rule.v1.Policy
	4,  // 2: api.casbin_rule.v1.AddPermissionsReq.policies:type_name -> api.casbin_rule.v1.Policy
	16, // 3: api.casbin_rule.v1.GetPermissionsRpl.data:type_name -> api.casbin_rule.v1.GetPermissionsRpl.Data
	4,  // 4: api.casbin_rule.v1.UpdatePermissionsReq.policies:type_name -> api.casbin_rule.v1.Policy
	4,  // 5: api.casbin_rule.v1.DeletePermissionsReq.policies:type_name -> api.casbin_rule.v1.Policy
	17, // 6: api.casbin_rule.v1.CasbinRule.GetAllSubjects:input_type -> google.protobuf.Empty
	2,  // 7: api.casbin_rule.v1.CasbinRule.DeleteDomain:input_type -> api.casbin_rule.v1.DeleteDomainReq
	5,  // 8: api.casbin_rule.v1.CasbinRule.BatchEnforce:input_type -> api.casbin_rule.v1.BatchEnforceReq
	7,  // 9: api.casbin_rule.v1.CasbinRule.AddPermissions:input_type -> api.casbin_rule.v1.AddPermissionsReq
	9,  // 10: api.casbin_rule.v1.CasbinRule.GetPermissions:input_type -> api.casbin_rule.v1.GetPermissionsReq
	11, // 11: api.casbin_rule.v1.CasbinRule.UpdatePermissions:input_type -> api.casbin_rule.v1.UpdatePermissionsReq
	13, // 12: api.casbin_rule.v1.CasbinRule.DeletePermissions:input_type -> api.casbin_rule.v1.DeletePermissionsReq
	1,  // 13: api.casbin_rule.v1.CasbinRule.GetAllSubjects:output_type -> api.casbin_rule.v1.GetAllSubjectsRpl
	3,  // 14: api.casbin_rule.v1.CasbinRule.DeleteDomain:output_type -> api.casbin_rule.v1.DeleteDomainRpl
	6,  // 15: api.casbin_rule.v1.CasbinRule.BatchEnforce:output_type -> api.casbin_rule.v1.BatchEnforceRpl
	8,  // 16: api.casbin_rule.v1.CasbinRule.AddPermissions:output_type -> api.casbin_rule.v1.AddPermissionsRpl
	10, // 17: api.casbin_rule.v1.CasbinRule.GetPermissions:output_type -> api.casbin_rule.v1.GetPermissionsRpl
	12, // 18: api.casbin_rule.v1.CasbinRule.UpdatePermissions:output_type -> api.casbin_rule.v1.UpdatePermissionsRpl
	14, // 19: api.casbin_rule.v1.CasbinRule.DeletePermissions:output_type -> api.casbin_rule.v1.DeletePermissionsRpl
	13, // [13:20] is the sub-list for method output_type
	6,  // [6:13] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_casbin_rule_v1_casbin_rule_proto_init() }
func file_casbin_rule_v1_casbin_rule_proto_init() {
	if File_casbin_rule_v1_casbin_rule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSubjectsRpl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDomainReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDomainRpl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEnforceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEnforceRpl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPermissionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPermissionsRpl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPermissionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPermissionsRpl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePermissionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePermissionsRpl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePermissionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePermissionsRpl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSubjectsRpl_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_casbin_rule_v1_casbin_rule_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPermissionsRpl_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_casbin_rule_v1_casbin_rule_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_casbin_rule_v1_casbin_rule_proto_goTypes,
		DependencyIndexes: file_casbin_rule_v1_casbin_rule_proto_depIdxs,
		EnumInfos:         file_casbin_rule_v1_casbin_rule_proto_enumTypes,
		MessageInfos:      file_casbin_rule_v1_casbin_rule_proto_msgTypes,
	}.Build()
	File_casbin_rule_v1_casbin_rule_proto = out.File
	file_casbin_rule_v1_casbin_rule_proto_rawDesc = nil
	file_casbin_rule_v1_casbin_rule_proto_goTypes = nil
	file_casbin_rule_v1_casbin_rule_proto_depIdxs = nil
}
