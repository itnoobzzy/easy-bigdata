syntax = "proto3";

package api.casbin_rule.v1;

import "validate/validate.proto";
import "google/protobuf/empty.proto";
import "errors/errors.proto";
import "google/api/annotations.proto";

option go_package = "easyCasbin/api/casbin_rule/v1;v1";
option java_multiple_files = true;
option java_package = "api.casbin_rule.v1";

enum CasbinRuleError {
	// 设置缺省错误码
	option (errors.default_code) = 500;

	// 内部错误
	INTERNAL_ERR = 0 [(errors.code) = 500];
	// 域不存在
	DOMAIN_NOT_FOUND = 1 [(errors.code) = 404];
	// 参数错误
	INVALID_ARGS = 2 [(errors.code) = 400];
}

service CasbinRule {
	// 获取所有鉴权主体
	rpc GetAllSubjects(google.protobuf.Empty) returns (GetAllSubjectsRpl) {
		option (google.api.http) = {
			get: "/easyCasbin/api/casbin_rule/v1/subs"
		};
	};

	// 获取域下权限规则列表
	rpc GetDomainAuth(GetDomainAuthReq) returns (GetDomainAuthRpl) {
		option (google.api.http) = {
			get: "/easyCasbin/api/casbin_rule/v1/domain_auth"
		};
	};

	// 删除域规则
	rpc DeleteDomain(DeleteDomainReq) returns (DeleteDomainRpl) {
		option (google.api.http) = {
			delete: "/easyCasbin/api/casbin_rule/v1/domain"
		};
	};

	// 批量校验权限，当有一条不通过时校验就不通过
	rpc BatchEnforce(BatchEnforceReq) returns (BatchEnforceRpl) {
		option (google.api.http) = {
			post: "/easyCasbin/api/casbin_rule/v1/enforce_policies"
			body: "*"
		};
	};

	// 为鉴权主体批量添加权限
	rpc AddPermissions(AddPermissionsReq) returns (AddPermissionsRpl) {
		option (google.api.http) = {
			post: "/easyCasbin/api/casbin_rule/v1/permissions"
			body: "*"
		};
	};

	// 获取鉴权主体所有权限
	rpc GetPermissions(GetPermissionsReq) returns (GetPermissionsRpl) {
		option (google.api.http) = {
			get: "/easyCasbin/api/casbin_rule/v1/permissions"
		};
	};

	// 为鉴权主体批量更新权限
	rpc UpdatePermissions(UpdatePermissionsReq) returns (UpdatePermissionsRpl) {
		option (google.api.http) = {
			put: "/easyCasbin/api/casbin_rule/v1/permissions"
			body: "*"
		};
	};

	// 为鉴权主体批量删除权限
	rpc DeletePermissions(DeletePermissionsReq) returns (DeletePermissionsRpl) {
		option (google.api.http) = {
			post: "/easyCasbin/api/casbin_rule/v1/del_permissions"
			body: "*"
		};
	};
}

message GetAllSubjectsRpl {
	message Data {
		string sub = 1;
	}
	uint32 code = 1;
	string message = 2;
	repeated Data data = 3;
}

message GetDomainAuthReq {
	int32 pageSize = 1 [(validate.rules).int32.gt=0];
	int32 pageNum = 2 [(validate.rules).int32.gt=0];
	string search = 3;
	string domain = 4 [(validate.rules).string.min_len=1];
}

message GetDomainAuthRpl {
	message Role {
		string id = 1;
		string name = 2;
	}
	message Rule {
		int64 id = 1;
		string ptype = 2;
		string subject = 3;
		string domain = 4;
		string object = 5;
		string action = 6;
		string effect = 7;
		string v5 = 8;
	}
	message Data {
		map<string, string> roles = 1;
		repeated Rule rules = 2;
		int32 total = 3;
	}
	int32 status = 1;
	Data data = 2;
	string message = 3;
}

message DeleteDomainReq {
	string domain = 1 [(validate.rules).string.min_len=1];
}

message DeleteDomainRpl {
	uint32 code = 1;
	string message = 2;
}

message Policy {
	string name = 1 [(validate.rules).string.min_len=1];
	string domain = 2 [(validate.rules).string.min_len=1];
	string resource = 3 [(validate.rules).string.min_len=1];
	string action = 4 [(validate.rules).string.min_len=1];
	string eft = 5;
}

message BatchEnforceReq {
	repeated Policy policies = 1 [(validate.rules).repeated.min_items=1];
}

message BatchEnforceRpl {
	uint32 code = 1;
	string message = 2;
	repeated bool data = 3;
}

message AddPermissionsReq {
	repeated Policy policies = 1 [(validate.rules).repeated.min_items=1];
}

message AddPermissionsRpl {
	uint32 code = 1;
	string message = 2;
}

message GetPermissionsReq {
	string sub = 1 [(validate.rules).string.min_len=1];
	string domain = 2 [(validate.rules).string.min_len=1];
}
message GetPermissionsRpl {
	message Data {
		string sub = 1;
		string domain = 2;
		string resource = 3;
		string action = 4;
		string eft = 5;
	}
	uint32 code = 1;
	string message = 2;
	repeated Data data = 3;
}

message UpdatePermissionsReq {
	repeated Policy oldPolicies = 1 [(validate.rules).repeated.min_items=1];
	repeated Policy newPolicies = 2 [(validate.rules).repeated.min_items=1];
}
message UpdatePermissionsRpl {
	uint32 code = 1;
	string message = 2;
}

message DeletePermissionsReq {
	repeated Policy policies = 1 [(validate.rules).repeated.min_items=1];
}
message DeletePermissionsRpl {
	uint32 code = 1;
	string message = 2;
}

